# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_rte2', [dirname(__file__)])
        except ImportError:
            import _rte2
            return _rte2
        if fp is not None:
            try:
                _mod = imp.load_module('_rte2', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _rte2 = swig_import_helper()
    del swig_import_helper
else:
    import _rte2
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _rte2.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _rte2.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _rte2.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _rte2.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _rte2.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _rte2.SwigPyIterator_equal(self, x)

    def copy(self):
        return _rte2.SwigPyIterator_copy(self)

    def next(self):
        return _rte2.SwigPyIterator_next(self)

    def __next__(self):
        return _rte2.SwigPyIterator___next__(self)

    def previous(self):
        return _rte2.SwigPyIterator_previous(self)

    def advance(self, n):
        return _rte2.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _rte2.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _rte2.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _rte2.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _rte2.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _rte2.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _rte2.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _rte2.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def makeArray(buffer):
    return _rte2.makeArray(buffer)
makeArray = _rte2.makeArray

_rte2.TriBool_False_swigconstant(_rte2)
TriBool_False = _rte2.TriBool_False

_rte2.TriBool_True_swigconstant(_rte2)
TriBool_True = _rte2.TriBool_True

_rte2.TriBool_Unknown_swigconstant(_rte2)
TriBool_Unknown = _rte2.TriBool_Unknown
class noncopyable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, noncopyable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, noncopyable, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _rte2.new_noncopyable()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _rte2.delete_noncopyable
    __del__ = lambda self: None
noncopyable_swigregister = _rte2.noncopyable_swigregister
noncopyable_swigregister(noncopyable)

class nonmovable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nonmovable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nonmovable, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _rte2.new_nonmovable()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _rte2.delete_nonmovable
    __del__ = lambda self: None
nonmovable_swigregister = _rte2.nonmovable_swigregister
nonmovable_swigregister(nonmovable)

class Serializable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Serializable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Serializable, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def calcSize(self):
        return _rte2.Serializable_calcSize(self)

    def serialize(self, buffer):
        return _rte2.Serializable_serialize(self, buffer)

    def deserialize(self, buffer):
        return _rte2.Serializable_deserialize(self, buffer)
    __swig_destroy__ = _rte2.delete_Serializable
    __del__ = lambda self: None
Serializable_swigregister = _rte2.Serializable_swigregister
Serializable_swigregister(Serializable)

class HierarchicalSerializable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HierarchicalSerializable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HierarchicalSerializable, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def calcSize(self, depth):
        return _rte2.HierarchicalSerializable_calcSize(self, depth)

    def serialize(self, buffer, depth):
        return _rte2.HierarchicalSerializable_serialize(self, buffer, depth)

    def deserialize(self, buffer, depth):
        return _rte2.HierarchicalSerializable_deserialize(self, buffer, depth)
    __swig_destroy__ = _rte2.delete_HierarchicalSerializable
    __del__ = lambda self: None
HierarchicalSerializable_swigregister = _rte2.HierarchicalSerializable_swigregister
HierarchicalSerializable_swigregister(HierarchicalSerializable)


def info_(function, msg):
    return _rte2.info_(function, msg)
info_ = _rte2.info_

def warn_(function, msg):
    return _rte2.warn_(function, msg)
warn_ = _rte2.warn_

def error_(function, msg):
    return _rte2.error_(function, msg)
error_ = _rte2.error_

def getLastErrorString(err):
    return _rte2.getLastErrorString(err)
getLastErrorString = _rte2.getLastErrorString

def replace(str, oldValue, newValue):
    return _rte2.replace(str, oldValue, newValue)
replace = _rte2.replace

def find(str, target):
    return _rte2.find(str, target)
find = _rte2.find

def trim(*args):
    return _rte2.trim(*args)
trim = _rte2.trim

def trim1(*args):
    return _rte2.trim1(*args)
trim1 = _rte2.trim1

def split(pOut, str, delimiter):
    return _rte2.split(pOut, str, delimiter)
split = _rte2.split

def join(pOut, strList, delimiter):
    return _rte2.join(pOut, strList, delimiter)
join = _rte2.join

def normalize(path):
    return _rte2.normalize(path)
normalize = _rte2.normalize

def exista(path):
    return _rte2.exista(path)
exista = _rte2.exista

def fileExists(path):
    return _rte2.fileExists(path)
fileExists = _rte2.fileExists

def dirExists(path):
    return _rte2.dirExists(path)
dirExists = _rte2.dirExists

def basename(path):
    return _rte2.basename(path)
basename = _rte2.basename

def dirname(path):
    return _rte2.dirname(path)
dirname = _rte2.dirname

def combine(lhs, rhs):
    return _rte2.combine(lhs, rhs)
combine = _rte2.combine

def formatError(error):
    return _rte2.formatError(error)
formatError = _rte2.formatError

def formatLastError():
    return _rte2.formatLastError()
formatLastError = _rte2.formatLastError

def xor128():
    return _rte2.xor128()
xor128 = _rte2.xor128
class NodeContent(Serializable):
    __swig_setmethods__ = {}
    for _s in [Serializable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NodeContent, name, value)
    __swig_getmethods__ = {}
    for _s in [Serializable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NodeContent, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _rte2.delete_NodeContent
    __del__ = lambda self: None

    def __eq__(self, other):
        return _rte2.NodeContent___eq__(self, other)

    def getName(self, *args):
        return _rte2.NodeContent_getName(self, *args)

    def getPath(self, *args):
        return _rte2.NodeContent_getPath(self, *args)

    def getLabel(self, *args):
        return _rte2.NodeContent_getLabel(self, *args)

    def setName(self, name):
        return _rte2.NodeContent_setName(self, name)

    def setLabel(self, label):
        return _rte2.NodeContent_setLabel(self, label)

    def getDataType(self):
        return _rte2.NodeContent_getDataType(self)

    def calcSize(self):
        return _rte2.NodeContent_calcSize(self)

    def serialize(self, buffer):
        return _rte2.NodeContent_serialize(self, buffer)

    def deserialize(self, buffer):
        return _rte2.NodeContent_deserialize(self, buffer)

    def updatePath(self):
        return _rte2.NodeContent_updatePath(self)

    def __init__(self, pOwnerNode):
        this = _rte2.new_NodeContent(pOwnerNode)
        try:
            self.this.append(this)
        except:
            self.this = this

    def createDataInt32(self):
        return _rte2.NodeContent_createDataInt32(self)

    def getDataInt32(self):
        return _rte2.NodeContent_getDataInt32(self)
NodeContent_swigregister = _rte2.NodeContent_swigregister
NodeContent_swigregister(NodeContent)

class Node(HierarchicalSerializable):
    __swig_setmethods__ = {}
    for _s in [HierarchicalSerializable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Node, name, value)
    __swig_getmethods__ = {}
    for _s in [HierarchicalSerializable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Node, name)
    __repr__ = _swig_repr
    __swig_getmethods__["createRootNode"] = lambda x: _rte2.Node_createRootNode
    if _newclass:
        createRootNode = staticmethod(_rte2.Node_createRootNode)
    __swig_getmethods__["destroy"] = lambda x: _rte2.Node_destroy
    if _newclass:
        destroy = staticmethod(_rte2.Node_destroy)

    def __eq__(self, other):
        return _rte2.Node___eq__(self, other)

    def __init__(self):
        this = _rte2.new_Node()
        try:
            self.this.append(this)
        except:
            self.this = this

    def getName(self, *args):
        return _rte2.Node_getName(self, *args)

    def getLabel(self, *args):
        return _rte2.Node_getLabel(self, *args)

    def getPath(self, *args):
        return _rte2.Node_getPath(self, *args)

    def getParent(self):
        return _rte2.Node_getParent(self)

    def getChildren(self):
        return _rte2.Node_getChildren(self)

    def createContent(self):
        return _rte2.Node_createContent(self)

    def getContent(self):
        return _rte2.Node_getContent(self)

    def setName(self, name):
        return _rte2.Node_setName(self, name)

    def setLabel(self, label):
        return _rte2.Node_setLabel(self, label)

    def addChild(self, *args):
        return _rte2.Node_addChild(self, *args)

    def getChildCount(self):
        return _rte2.Node_getChildCount(self)

    def findChild(self, *args):
        return _rte2.Node_findChild(self, *args)

    def removeChild(self, *args):
        return _rte2.Node_removeChild(self, *args)

    def calcSize(self, *args):
        return _rte2.Node_calcSize(self, *args)

    def serialize(self, *args):
        return _rte2.Node_serialize(self, *args)

    def deserialize(self, *args):
        return _rte2.Node_deserialize(self, *args)

    def updatePath(self):
        return _rte2.Node_updatePath(self)
Node_swigregister = _rte2.Node_swigregister
Node_swigregister(Node)

def Node_createRootNode(name, label):
    return _rte2.Node_createRootNode(name, label)
Node_createRootNode = _rte2.Node_createRootNode

def Node_destroy(ppNode):
    return _rte2.Node_destroy(ppNode)
Node_destroy = _rte2.Node_destroy

class Socket(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Socket, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Socket, name)
    __repr__ = _swig_repr
    ProtocolType_Invalid = _rte2.Socket_ProtocolType_Invalid
    ProtocolType_Tcp = _rte2.Socket_ProtocolType_Tcp

    def __init__(self):
        this = _rte2.new_Socket()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _rte2.delete_Socket
    __del__ = lambda self: None
    __swig_getmethods__["setup"] = lambda x: _rte2.Socket_setup
    if _newclass:
        setup = staticmethod(_rte2.Socket_setup)
    __swig_getmethods__["shutdown"] = lambda x: _rte2.Socket_shutdown
    if _newclass:
        shutdown = staticmethod(_rte2.Socket_shutdown)

    def configure(self, type):
        return _rte2.Socket_configure(self, type)

    def send(self, buffer, bufferSize):
        return _rte2.Socket_send(self, buffer, bufferSize)

    def recv(self, buffer, bufferSize):
        return _rte2.Socket_recv(self, buffer, bufferSize)

    def close(self):
        return _rte2.Socket_close(self)

    def setBlocking(self, enable):
        return _rte2.Socket_setBlocking(self, enable)

    def getAvailabieSize(self):
        return _rte2.Socket_getAvailabieSize(self)

    def getProtocolType(self):
        return _rte2.Socket_getProtocolType(self)

    def getHost(self):
        return _rte2.Socket_getHost(self)

    def getPort(self):
        return _rte2.Socket_getPort(self)

    def bind(self, port):
        return _rte2.Socket_bind(self, port)

    def listen(self, backlog=1):
        return _rte2.Socket_listen(self, backlog)

    def accept(self, pAccepted):
        return _rte2.Socket_accept(self, pAccepted)

    def connect(self, host, port):
        return _rte2.Socket_connect(self, host, port)
Socket_swigregister = _rte2.Socket_swigregister
Socket_swigregister(Socket)

def Socket_setup():
    return _rte2.Socket_setup()
Socket_setup = _rte2.Socket_setup

def Socket_shutdown():
    return _rte2.Socket_shutdown()
Socket_shutdown = _rte2.Socket_shutdown

class Thread(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Thread, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Thread, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _rte2.new_Thread()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _rte2.delete_Thread
    __del__ = lambda self: None

    def start(self, threadFunc, arg=None):
        return _rte2.Thread_start(self, threadFunc, arg)

    def join(self):
        return _rte2.Thread_join(self)

    def getId(self):
        return _rte2.Thread_getId(self)
Thread_swigregister = _rte2.Thread_swigregister
Thread_swigregister(Thread)

class LockObject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LockObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LockObject, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def lock(self):
        return _rte2.LockObject_lock(self)

    def tryLock(self):
        return _rte2.LockObject_tryLock(self)

    def unlock(self):
        return _rte2.LockObject_unlock(self)

    def isLocked(self):
        return _rte2.LockObject_isLocked(self)
    __swig_destroy__ = _rte2.delete_LockObject
    __del__ = lambda self: None
LockObject_swigregister = _rte2.LockObject_swigregister
LockObject_swigregister(LockObject)

class CriticalSection(LockObject):
    __swig_setmethods__ = {}
    for _s in [LockObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CriticalSection, name, value)
    __swig_getmethods__ = {}
    for _s in [LockObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CriticalSection, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _rte2.new_CriticalSection()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _rte2.delete_CriticalSection
    __del__ = lambda self: None

    def lock(self):
        return _rte2.CriticalSection_lock(self)

    def tryLock(self):
        return _rte2.CriticalSection_tryLock(self)

    def unlock(self):
        return _rte2.CriticalSection_unlock(self)

    def isLocked(self):
        return _rte2.CriticalSection_isLocked(self)
CriticalSection_swigregister = _rte2.CriticalSection_swigregister
CriticalSection_swigregister(CriticalSection)

class UniqueLock(LockObject):
    __swig_setmethods__ = {}
    for _s in [LockObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UniqueLock, name, value)
    __swig_getmethods__ = {}
    for _s in [LockObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UniqueLock, name)
    __repr__ = _swig_repr

    def __init__(self, lockObj, deferLock=False):
        this = _rte2.new_UniqueLock(lockObj, deferLock)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _rte2.delete_UniqueLock
    __del__ = lambda self: None

    def lock(self):
        return _rte2.UniqueLock_lock(self)

    def tryLock(self):
        return _rte2.UniqueLock_tryLock(self)

    def unlock(self):
        return _rte2.UniqueLock_unlock(self)

    def isLocked(self):
        return _rte2.UniqueLock_isLocked(self)
UniqueLock_swigregister = _rte2.UniqueLock_swigregister
UniqueLock_swigregister(UniqueLock)

class ConditionVariable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConditionVariable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConditionVariable, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _rte2.new_ConditionVariable()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _rte2.delete_ConditionVariable
    __del__ = lambda self: None

    def notifyOne(self):
        return _rte2.ConditionVariable_notifyOne(self)

    def wait(self, *args):
        return _rte2.ConditionVariable_wait(self, *args)
ConditionVariable_swigregister = _rte2.ConditionVariable_swigregister
ConditionVariable_swigregister(ConditionVariable)

class TcpReceivedData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TcpReceivedData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TcpReceivedData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["clientId"] = _rte2.TcpReceivedData_clientId_set
    __swig_getmethods__["clientId"] = _rte2.TcpReceivedData_clientId_get
    if _newclass:
        clientId = _swig_property(_rte2.TcpReceivedData_clientId_get, _rte2.TcpReceivedData_clientId_set)
    __swig_setmethods__["buffer"] = _rte2.TcpReceivedData_buffer_set
    __swig_getmethods__["buffer"] = _rte2.TcpReceivedData_buffer_get
    if _newclass:
        buffer = _swig_property(_rte2.TcpReceivedData_buffer_get, _rte2.TcpReceivedData_buffer_set)
    __swig_setmethods__["bufferSize"] = _rte2.TcpReceivedData_bufferSize_set
    __swig_getmethods__["bufferSize"] = _rte2.TcpReceivedData_bufferSize_get
    if _newclass:
        bufferSize = _swig_property(_rte2.TcpReceivedData_bufferSize_get, _rte2.TcpReceivedData_bufferSize_set)

    def __init__(self):
        this = _rte2.new_TcpReceivedData()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _rte2.delete_TcpReceivedData
    __del__ = lambda self: None

    def clone(self):
        return _rte2.TcpReceivedData_clone(self)

    def move(self):
        return _rte2.TcpReceivedData_move(self)

    def deallocate(self):
        return _rte2.TcpReceivedData_deallocate(self)
TcpReceivedData_swigregister = _rte2.TcpReceivedData_swigregister
TcpReceivedData_swigregister(TcpReceivedData)

class TcpSentData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TcpSentData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TcpSentData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["clientId"] = _rte2.TcpSentData_clientId_set
    __swig_getmethods__["clientId"] = _rte2.TcpSentData_clientId_get
    if _newclass:
        clientId = _swig_property(_rte2.TcpSentData_clientId_get, _rte2.TcpSentData_clientId_set)
    __swig_setmethods__["buffer"] = _rte2.TcpSentData_buffer_set
    __swig_getmethods__["buffer"] = _rte2.TcpSentData_buffer_get
    if _newclass:
        buffer = _swig_property(_rte2.TcpSentData_buffer_get, _rte2.TcpSentData_buffer_set)
    __swig_setmethods__["bufferSize"] = _rte2.TcpSentData_bufferSize_set
    __swig_getmethods__["bufferSize"] = _rte2.TcpSentData_bufferSize_get
    if _newclass:
        bufferSize = _swig_property(_rte2.TcpSentData_bufferSize_get, _rte2.TcpSentData_bufferSize_set)
    __swig_setmethods__["sentSize"] = _rte2.TcpSentData_sentSize_set
    __swig_getmethods__["sentSize"] = _rte2.TcpSentData_sentSize_get
    if _newclass:
        sentSize = _swig_property(_rte2.TcpSentData_sentSize_get, _rte2.TcpSentData_sentSize_set)

    def __init__(self):
        this = _rte2.new_TcpSentData()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _rte2.delete_TcpSentData
    __del__ = lambda self: None

    def clone(self):
        return _rte2.TcpSentData_clone(self)

    def move(self):
        return _rte2.TcpSentData_move(self)

    def deallocate(self):
        return _rte2.TcpSentData_deallocate(self)
TcpSentData_swigregister = _rte2.TcpSentData_swigregister
TcpSentData_swigregister(TcpSentData)

class TcpClient(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TcpClient, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TcpClient, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _rte2.new_TcpClient()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _rte2.delete_TcpClient
    __del__ = lambda self: None

    def connect(self, host, port):
        return _rte2.TcpClient_connect(self, host, port)

    def close(self):
        return _rte2.TcpClient_close(self)

    def sendAsync(self, buffer, bufferSize):
        return _rte2.TcpClient_sendAsync(self, buffer, bufferSize)

    def popReceivedQueue(self):
        return _rte2.TcpClient_popReceivedQueue(self)

    def popSentQueue(self):
        return _rte2.TcpClient_popSentQueue(self)

    def isConnectionAlive(self):
        return _rte2.TcpClient_isConnectionAlive(self)
TcpClient_swigregister = _rte2.TcpClient_swigregister
TcpClient_swigregister(TcpClient)

class TcpServer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TcpServer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TcpServer, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _rte2.new_TcpServer()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _rte2.delete_TcpServer
    __del__ = lambda self: None

    def open(self, port):
        return _rte2.TcpServer_open(self, port)

    def close(self):
        return _rte2.TcpServer_close(self)

    def sendAsync(self, id, buffer, bufferSize):
        return _rte2.TcpServer_sendAsync(self, id, buffer, bufferSize)

    def broadcastAsync(self, buffer, bufferSize):
        return _rte2.TcpServer_broadcastAsync(self, buffer, bufferSize)

    def getClientCount(self):
        return _rte2.TcpServer_getClientCount(self)

    def getClientList(self):
        return _rte2.TcpServer_getClientList(self)

    def popAcceptedQueue(self):
        return _rte2.TcpServer_popAcceptedQueue(self)

    def popReceivedQueue(self):
        return _rte2.TcpServer_popReceivedQueue(self)

    def popSentQueue(self):
        return _rte2.TcpServer_popSentQueue(self)

    def popClosedQueue(self):
        return _rte2.TcpServer_popClosedQueue(self)

    def closeConnection(self, id):
        return _rte2.TcpServer_closeConnection(self, id)
TcpServer_swigregister = _rte2.TcpServer_swigregister
TcpServer_swigregister(TcpServer)

class NodeContentData(Serializable):
    __swig_setmethods__ = {}
    for _s in [Serializable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NodeContentData, name, value)
    __swig_getmethods__ = {}
    for _s in [Serializable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NodeContentData, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Type_Invalid = _rte2.NodeContentData_Type_Invalid
    Type_Int32 = _rte2.NodeContentData_Type_Int32
    __swig_destroy__ = _rte2.delete_NodeContentData
    __del__ = lambda self: None

    def __eq__(self, other):
        return _rte2.NodeContentData___eq__(self, other)

    def calcSize(self):
        return _rte2.NodeContentData_calcSize(self)

    def serialize(self, buffer):
        return _rte2.NodeContentData_serialize(self, buffer)

    def deserialize(self, buffer):
        return _rte2.NodeContentData_deserialize(self, buffer)

    def getType(self, *args):
        return _rte2.NodeContentData_getType(self, *args)
NodeContentData_swigregister = _rte2.NodeContentData_swigregister
NodeContentData_swigregister(NodeContentData)

class Int32Data(NodeContentData):
    __swig_setmethods__ = {}
    for _s in [NodeContentData]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Int32Data, name, value)
    __swig_getmethods__ = {}
    for _s in [NodeContentData]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Int32Data, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Value"] = _rte2.Int32Data_Value_set
    __swig_getmethods__["Value"] = _rte2.Int32Data_Value_get
    if _newclass:
        Value = _swig_property(_rte2.Int32Data_Value_get, _rte2.Int32Data_Value_set)

    def __init__(self):
        this = _rte2.new_Int32Data()
        try:
            self.this.append(this)
        except:
            self.this = this

    def calcSize(self):
        return _rte2.Int32Data_calcSize(self)

    def serialize(self, buffer):
        return _rte2.Int32Data_serialize(self, buffer)

    def deserialize(self, buffer):
        return _rte2.Int32Data_deserialize(self, buffer)
    __swig_destroy__ = _rte2.delete_Int32Data
    __del__ = lambda self: None
Int32Data_swigregister = _rte2.Int32Data_swigregister
Int32Data_swigregister(Int32Data)

class core(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, core, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, core, name)
    __repr__ = _swig_repr
    __swig_getmethods__["setup"] = lambda x: _rte2.core_setup
    if _newclass:
        setup = staticmethod(_rte2.core_setup)
    __swig_getmethods__["shutdown"] = lambda x: _rte2.core_shutdown
    if _newclass:
        shutdown = staticmethod(_rte2.core_shutdown)

    def __init__(self):
        this = _rte2.new_core()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _rte2.delete_core
    __del__ = lambda self: None
core_swigregister = _rte2.core_swigregister
core_swigregister(core)

def core_setup():
    return _rte2.core_setup()
core_setup = _rte2.core_setup

def core_shutdown():
    return _rte2.core_shutdown()
core_shutdown = _rte2.core_shutdown

class buffer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, buffer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, buffer, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _rte2.new_buffer(nelements)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _rte2.delete_buffer
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _rte2.buffer___getitem__(self, index)

    def __setitem__(self, index, value):
        return _rte2.buffer___setitem__(self, index, value)

    def cast(self):
        return _rte2.buffer_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _rte2.buffer_frompointer
    if _newclass:
        frompointer = staticmethod(_rte2.buffer_frompointer)
buffer_swigregister = _rte2.buffer_swigregister
buffer_swigregister(buffer)

def buffer_frompointer(t):
    return _rte2.buffer_frompointer(t)
buffer_frompointer = _rte2.buffer_frompointer

class SafeArrayUInt8(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SafeArrayUInt8, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SafeArrayUInt8, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _rte2.new_SafeArrayUInt8(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _rte2.delete_SafeArrayUInt8
    __del__ = lambda self: None

    def moveFrom(self, other):
        return _rte2.SafeArrayUInt8_moveFrom(self, other)

    def get(self):
        return _rte2.SafeArrayUInt8_get(self)

    def size(self):
        return _rte2.SafeArrayUInt8_size(self)

    def swap(self, other):
        return _rte2.SafeArrayUInt8_swap(self, other)

    def resize(self, size):
        return _rte2.SafeArrayUInt8_resize(self, size)

    def append(self, *args):
        return _rte2.SafeArrayUInt8_append(self, *args)
SafeArrayUInt8_swigregister = _rte2.SafeArrayUInt8_swigregister
SafeArrayUInt8_swigregister(SafeArrayUInt8)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _rte2.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _rte2.IntVector___nonzero__(self)

    def __bool__(self):
        return _rte2.IntVector___bool__(self)

    def __len__(self):
        return _rte2.IntVector___len__(self)

    def pop(self):
        return _rte2.IntVector_pop(self)

    def __getslice__(self, i, j):
        return _rte2.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _rte2.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _rte2.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _rte2.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _rte2.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _rte2.IntVector___setitem__(self, *args)

    def append(self, x):
        return _rte2.IntVector_append(self, x)

    def empty(self):
        return _rte2.IntVector_empty(self)

    def size(self):
        return _rte2.IntVector_size(self)

    def clear(self):
        return _rte2.IntVector_clear(self)

    def swap(self, v):
        return _rte2.IntVector_swap(self, v)

    def get_allocator(self):
        return _rte2.IntVector_get_allocator(self)

    def begin(self):
        return _rte2.IntVector_begin(self)

    def end(self):
        return _rte2.IntVector_end(self)

    def rbegin(self):
        return _rte2.IntVector_rbegin(self)

    def rend(self):
        return _rte2.IntVector_rend(self)

    def pop_back(self):
        return _rte2.IntVector_pop_back(self)

    def erase(self, *args):
        return _rte2.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _rte2.new_IntVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _rte2.IntVector_push_back(self, x)

    def front(self):
        return _rte2.IntVector_front(self)

    def back(self):
        return _rte2.IntVector_back(self)

    def assign(self, n, x):
        return _rte2.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _rte2.IntVector_resize(self, *args)

    def insert(self, *args):
        return _rte2.IntVector_insert(self, *args)

    def reserve(self, n):
        return _rte2.IntVector_reserve(self, n)

    def capacity(self):
        return _rte2.IntVector_capacity(self)
    __swig_destroy__ = _rte2.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _rte2.IntVector_swigregister
IntVector_swigregister(IntVector)

class StringVecotor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVecotor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVecotor, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _rte2.StringVecotor_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _rte2.StringVecotor___nonzero__(self)

    def __bool__(self):
        return _rte2.StringVecotor___bool__(self)

    def __len__(self):
        return _rte2.StringVecotor___len__(self)

    def pop(self):
        return _rte2.StringVecotor_pop(self)

    def __getslice__(self, i, j):
        return _rte2.StringVecotor___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _rte2.StringVecotor___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _rte2.StringVecotor___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _rte2.StringVecotor___delitem__(self, *args)

    def __getitem__(self, *args):
        return _rte2.StringVecotor___getitem__(self, *args)

    def __setitem__(self, *args):
        return _rte2.StringVecotor___setitem__(self, *args)

    def append(self, x):
        return _rte2.StringVecotor_append(self, x)

    def empty(self):
        return _rte2.StringVecotor_empty(self)

    def size(self):
        return _rte2.StringVecotor_size(self)

    def clear(self):
        return _rte2.StringVecotor_clear(self)

    def swap(self, v):
        return _rte2.StringVecotor_swap(self, v)

    def get_allocator(self):
        return _rte2.StringVecotor_get_allocator(self)

    def begin(self):
        return _rte2.StringVecotor_begin(self)

    def end(self):
        return _rte2.StringVecotor_end(self)

    def rbegin(self):
        return _rte2.StringVecotor_rbegin(self)

    def rend(self):
        return _rte2.StringVecotor_rend(self)

    def pop_back(self):
        return _rte2.StringVecotor_pop_back(self)

    def erase(self, *args):
        return _rte2.StringVecotor_erase(self, *args)

    def __init__(self, *args):
        this = _rte2.new_StringVecotor(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _rte2.StringVecotor_push_back(self, x)

    def front(self):
        return _rte2.StringVecotor_front(self)

    def back(self):
        return _rte2.StringVecotor_back(self)

    def assign(self, n, x):
        return _rte2.StringVecotor_assign(self, n, x)

    def resize(self, *args):
        return _rte2.StringVecotor_resize(self, *args)

    def insert(self, *args):
        return _rte2.StringVecotor_insert(self, *args)

    def reserve(self, n):
        return _rte2.StringVecotor_reserve(self, n)

    def capacity(self):
        return _rte2.StringVecotor_capacity(self)
    __swig_destroy__ = _rte2.delete_StringVecotor
    __del__ = lambda self: None
StringVecotor_swigregister = _rte2.StringVecotor_swigregister
StringVecotor_swigregister(StringVecotor)

class NodePtrVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NodePtrVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NodePtrVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _rte2.NodePtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _rte2.NodePtrVector___nonzero__(self)

    def __bool__(self):
        return _rte2.NodePtrVector___bool__(self)

    def __len__(self):
        return _rte2.NodePtrVector___len__(self)

    def pop(self):
        return _rte2.NodePtrVector_pop(self)

    def __getslice__(self, i, j):
        return _rte2.NodePtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _rte2.NodePtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _rte2.NodePtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _rte2.NodePtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _rte2.NodePtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _rte2.NodePtrVector___setitem__(self, *args)

    def append(self, x):
        return _rte2.NodePtrVector_append(self, x)

    def empty(self):
        return _rte2.NodePtrVector_empty(self)

    def size(self):
        return _rte2.NodePtrVector_size(self)

    def clear(self):
        return _rte2.NodePtrVector_clear(self)

    def swap(self, v):
        return _rte2.NodePtrVector_swap(self, v)

    def get_allocator(self):
        return _rte2.NodePtrVector_get_allocator(self)

    def begin(self):
        return _rte2.NodePtrVector_begin(self)

    def end(self):
        return _rte2.NodePtrVector_end(self)

    def rbegin(self):
        return _rte2.NodePtrVector_rbegin(self)

    def rend(self):
        return _rte2.NodePtrVector_rend(self)

    def pop_back(self):
        return _rte2.NodePtrVector_pop_back(self)

    def erase(self, *args):
        return _rte2.NodePtrVector_erase(self, *args)

    def __init__(self, *args):
        this = _rte2.new_NodePtrVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _rte2.NodePtrVector_push_back(self, x)

    def front(self):
        return _rte2.NodePtrVector_front(self)

    def back(self):
        return _rte2.NodePtrVector_back(self)

    def assign(self, n, x):
        return _rte2.NodePtrVector_assign(self, n, x)

    def resize(self, *args):
        return _rte2.NodePtrVector_resize(self, *args)

    def insert(self, *args):
        return _rte2.NodePtrVector_insert(self, *args)

    def reserve(self, n):
        return _rte2.NodePtrVector_reserve(self, n)

    def capacity(self):
        return _rte2.NodePtrVector_capacity(self)
    __swig_destroy__ = _rte2.delete_NodePtrVector
    __del__ = lambda self: None
NodePtrVector_swigregister = _rte2.NodePtrVector_swigregister
NodePtrVector_swigregister(NodePtrVector)

class TcpReceivedDataVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TcpReceivedDataVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TcpReceivedDataVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _rte2.TcpReceivedDataVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _rte2.TcpReceivedDataVector___nonzero__(self)

    def __bool__(self):
        return _rte2.TcpReceivedDataVector___bool__(self)

    def __len__(self):
        return _rte2.TcpReceivedDataVector___len__(self)

    def pop(self):
        return _rte2.TcpReceivedDataVector_pop(self)

    def __getslice__(self, i, j):
        return _rte2.TcpReceivedDataVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _rte2.TcpReceivedDataVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _rte2.TcpReceivedDataVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _rte2.TcpReceivedDataVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _rte2.TcpReceivedDataVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _rte2.TcpReceivedDataVector___setitem__(self, *args)

    def append(self, x):
        return _rte2.TcpReceivedDataVector_append(self, x)

    def empty(self):
        return _rte2.TcpReceivedDataVector_empty(self)

    def size(self):
        return _rte2.TcpReceivedDataVector_size(self)

    def clear(self):
        return _rte2.TcpReceivedDataVector_clear(self)

    def swap(self, v):
        return _rte2.TcpReceivedDataVector_swap(self, v)

    def get_allocator(self):
        return _rte2.TcpReceivedDataVector_get_allocator(self)

    def begin(self):
        return _rte2.TcpReceivedDataVector_begin(self)

    def end(self):
        return _rte2.TcpReceivedDataVector_end(self)

    def rbegin(self):
        return _rte2.TcpReceivedDataVector_rbegin(self)

    def rend(self):
        return _rte2.TcpReceivedDataVector_rend(self)

    def pop_back(self):
        return _rte2.TcpReceivedDataVector_pop_back(self)

    def erase(self, *args):
        return _rte2.TcpReceivedDataVector_erase(self, *args)

    def __init__(self, *args):
        this = _rte2.new_TcpReceivedDataVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _rte2.TcpReceivedDataVector_push_back(self, x)

    def front(self):
        return _rte2.TcpReceivedDataVector_front(self)

    def back(self):
        return _rte2.TcpReceivedDataVector_back(self)

    def assign(self, n, x):
        return _rte2.TcpReceivedDataVector_assign(self, n, x)

    def resize(self, *args):
        return _rte2.TcpReceivedDataVector_resize(self, *args)

    def insert(self, *args):
        return _rte2.TcpReceivedDataVector_insert(self, *args)

    def reserve(self, n):
        return _rte2.TcpReceivedDataVector_reserve(self, n)

    def capacity(self):
        return _rte2.TcpReceivedDataVector_capacity(self)
    __swig_destroy__ = _rte2.delete_TcpReceivedDataVector
    __del__ = lambda self: None
TcpReceivedDataVector_swigregister = _rte2.TcpReceivedDataVector_swigregister
TcpReceivedDataVector_swigregister(TcpReceivedDataVector)

class TcpSentDataVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TcpSentDataVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TcpSentDataVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _rte2.TcpSentDataVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _rte2.TcpSentDataVector___nonzero__(self)

    def __bool__(self):
        return _rte2.TcpSentDataVector___bool__(self)

    def __len__(self):
        return _rte2.TcpSentDataVector___len__(self)

    def pop(self):
        return _rte2.TcpSentDataVector_pop(self)

    def __getslice__(self, i, j):
        return _rte2.TcpSentDataVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _rte2.TcpSentDataVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _rte2.TcpSentDataVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _rte2.TcpSentDataVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _rte2.TcpSentDataVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _rte2.TcpSentDataVector___setitem__(self, *args)

    def append(self, x):
        return _rte2.TcpSentDataVector_append(self, x)

    def empty(self):
        return _rte2.TcpSentDataVector_empty(self)

    def size(self):
        return _rte2.TcpSentDataVector_size(self)

    def clear(self):
        return _rte2.TcpSentDataVector_clear(self)

    def swap(self, v):
        return _rte2.TcpSentDataVector_swap(self, v)

    def get_allocator(self):
        return _rte2.TcpSentDataVector_get_allocator(self)

    def begin(self):
        return _rte2.TcpSentDataVector_begin(self)

    def end(self):
        return _rte2.TcpSentDataVector_end(self)

    def rbegin(self):
        return _rte2.TcpSentDataVector_rbegin(self)

    def rend(self):
        return _rte2.TcpSentDataVector_rend(self)

    def pop_back(self):
        return _rte2.TcpSentDataVector_pop_back(self)

    def erase(self, *args):
        return _rte2.TcpSentDataVector_erase(self, *args)

    def __init__(self, *args):
        this = _rte2.new_TcpSentDataVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _rte2.TcpSentDataVector_push_back(self, x)

    def front(self):
        return _rte2.TcpSentDataVector_front(self)

    def back(self):
        return _rte2.TcpSentDataVector_back(self)

    def assign(self, n, x):
        return _rte2.TcpSentDataVector_assign(self, n, x)

    def resize(self, *args):
        return _rte2.TcpSentDataVector_resize(self, *args)

    def insert(self, *args):
        return _rte2.TcpSentDataVector_insert(self, *args)

    def reserve(self, n):
        return _rte2.TcpSentDataVector_reserve(self, n)

    def capacity(self):
        return _rte2.TcpSentDataVector_capacity(self)
    __swig_destroy__ = _rte2.delete_TcpSentDataVector
    __del__ = lambda self: None
TcpSentDataVector_swigregister = _rte2.TcpSentDataVector_swigregister
TcpSentDataVector_swigregister(TcpSentDataVector)


def createRootNode(name, label):
    return _rte2.createRootNode(name, label)
createRootNode = _rte2.createRootNode

def destroyRootNode(pNode):
    return _rte2.destroyRootNode(pNode)
destroyRootNode = _rte2.destroyRootNode
# This file is compatible with both classic and new-style classes.


