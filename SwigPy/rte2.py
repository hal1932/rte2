# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_rte2', [dirname(__file__)])
        except ImportError:
            import _rte2
            return _rte2
        if fp is not None:
            try:
                _mod = imp.load_module('_rte2', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _rte2 = swig_import_helper()
    del swig_import_helper
else:
    import _rte2
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _rte2.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _rte2.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _rte2.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _rte2.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _rte2.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _rte2.SwigPyIterator_equal(self, x)

    def copy(self):
        return _rte2.SwigPyIterator_copy(self)

    def next(self):
        return _rte2.SwigPyIterator_next(self)

    def __next__(self):
        return _rte2.SwigPyIterator___next__(self)

    def previous(self):
        return _rte2.SwigPyIterator_previous(self)

    def advance(self, n):
        return _rte2.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _rte2.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _rte2.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _rte2.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _rte2.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _rte2.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _rte2.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _rte2.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def info_(function, msg):
    return _rte2.info_(function, msg)
info_ = _rte2.info_

def warn_(function, msg):
    return _rte2.warn_(function, msg)
warn_ = _rte2.warn_

def error_(function, msg):
    return _rte2.error_(function, msg)
error_ = _rte2.error_

def getLastErrorString(err):
    return _rte2.getLastErrorString(err)
getLastErrorString = _rte2.getLastErrorString

def replace(str, oldValue, newValue):
    return _rte2.replace(str, oldValue, newValue)
replace = _rte2.replace

def find(str, target):
    return _rte2.find(str, target)
find = _rte2.find

def trim(*args):
    return _rte2.trim(*args)
trim = _rte2.trim

def trim1(*args):
    return _rte2.trim1(*args)
trim1 = _rte2.trim1

def split(pOut, str, delimiter):
    return _rte2.split(pOut, str, delimiter)
split = _rte2.split

def join(pOut, strList, delimiter):
    return _rte2.join(pOut, strList, delimiter)
join = _rte2.join

def normalize(path):
    return _rte2.normalize(path)
normalize = _rte2.normalize

def exista(path):
    return _rte2.exista(path)
exista = _rte2.exista

def fileExists(path):
    return _rte2.fileExists(path)
fileExists = _rte2.fileExists

def dirExists(path):
    return _rte2.dirExists(path)
dirExists = _rte2.dirExists

def basename(path):
    return _rte2.basename(path)
basename = _rte2.basename

def dirname(path):
    return _rte2.dirname(path)
dirname = _rte2.dirname

def combine(lhs, rhs):
    return _rte2.combine(lhs, rhs)
combine = _rte2.combine

def formatError(error):
    return _rte2.formatError(error)
formatError = _rte2.formatError

def formatLastError():
    return _rte2.formatLastError()
formatLastError = _rte2.formatLastError
class NodeBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NodeBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NodeBase, name)
    __repr__ = _swig_repr

    def __init__(self, name, pParent):
        this = _rte2.new_NodeBase(name, pParent)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _rte2.delete_NodeBase
    __del__ = lambda self: None

    def getName(self, *args):
        return _rte2.NodeBase_getName(self, *args)

    def getPath(self, *args):
        return _rte2.NodeBase_getPath(self, *args)

    def getParent(self, *args):
        return _rte2.NodeBase_getParent(self, *args)

    def setParent(self, pParent):
        return _rte2.NodeBase_setParent(self, pParent)
NodeBase_swigregister = _rte2.NodeBase_swigregister
NodeBase_swigregister(NodeBase)

class Node(NodeBase):
    __swig_setmethods__ = {}
    for _s in [NodeBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Node, name, value)
    __swig_getmethods__ = {}
    for _s in [NodeBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Node, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _rte2.new_Node(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _rte2.delete_Node
    __del__ = lambda self: None

    def getChildren(self):
        return _rte2.Node_getChildren(self)

    def getParameterList(self):
        return _rte2.Node_getParameterList(self)

    def addParemeter(self, pParam):
        return _rte2.Node_addParemeter(self, pParam)

    def serialize(self, buffer, pContext):
        return _rte2.Node_serialize(self, buffer, pContext)

    def deserialize(self, buffer, pContext):
        return _rte2.Node_deserialize(self, buffer, pContext)
Node_swigregister = _rte2.Node_swigregister
Node_swigregister(Node)


_rte2.ParameterType_Invalid_swigconstant(_rte2)
ParameterType_Invalid = _rte2.ParameterType_Invalid

_rte2.ParameterType_Int32_swigconstant(_rte2)
ParameterType_Int32 = _rte2.ParameterType_Int32

_rte2.ParameterType_Float32_swigconstant(_rte2)
ParameterType_Float32 = _rte2.ParameterType_Float32

_rte2.ParameterType_Vector3_swigconstant(_rte2)
ParameterType_Vector3 = _rte2.ParameterType_Vector3

_rte2.ParameterType_String_swigconstant(_rte2)
ParameterType_String = _rte2.ParameterType_String

_rte2.ParameterType_File_swigconstant(_rte2)
ParameterType_File = _rte2.ParameterType_File
class Vector3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector3, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _rte2.Vector3_x_set
    __swig_getmethods__["x"] = _rte2.Vector3_x_get
    if _newclass:
        x = _swig_property(_rte2.Vector3_x_get, _rte2.Vector3_x_set)
    __swig_setmethods__["y"] = _rte2.Vector3_y_set
    __swig_getmethods__["y"] = _rte2.Vector3_y_get
    if _newclass:
        y = _swig_property(_rte2.Vector3_y_get, _rte2.Vector3_y_set)
    __swig_setmethods__["z"] = _rte2.Vector3_z_set
    __swig_getmethods__["z"] = _rte2.Vector3_z_get
    if _newclass:
        z = _swig_property(_rte2.Vector3_z_get, _rte2.Vector3_z_set)

    def __init__(self):
        this = _rte2.new_Vector3()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _rte2.delete_Vector3
    __del__ = lambda self: None
Vector3_swigregister = _rte2.Vector3_swigregister
Vector3_swigregister(Vector3)

class File(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, File, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, File, name)
    __repr__ = _swig_repr
    __swig_setmethods__["path"] = _rte2.File_path_set
    __swig_getmethods__["path"] = _rte2.File_path_get
    if _newclass:
        path = _swig_property(_rte2.File_path_get, _rte2.File_path_set)
    __swig_setmethods__["length"] = _rte2.File_length_set
    __swig_getmethods__["length"] = _rte2.File_length_get
    if _newclass:
        length = _swig_property(_rte2.File_length_get, _rte2.File_length_set)

    def __init__(self):
        this = _rte2.new_File()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _rte2.delete_File
    __del__ = lambda self: None
File_swigregister = _rte2.File_swigregister
File_swigregister(File)

class NodeParameter(NodeBase):
    __swig_setmethods__ = {}
    for _s in [NodeBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NodeParameter, name, value)
    __swig_getmethods__ = {}
    for _s in [NodeBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NodeParameter, name)
    __repr__ = _swig_repr
    __swig_getmethods__["setFileParameterRoot"] = lambda x: _rte2.NodeParameter_setFileParameterRoot
    if _newclass:
        setFileParameterRoot = staticmethod(_rte2.NodeParameter_setFileParameterRoot)
    __swig_getmethods__["getFileParameterRoot"] = lambda x: _rte2.NodeParameter_getFileParameterRoot
    if _newclass:
        getFileParameterRoot = staticmethod(_rte2.NodeParameter_getFileParameterRoot)

    def __init__(self, *args):
        this = _rte2.new_NodeParameter(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _rte2.delete_NodeParameter
    __del__ = lambda self: None

    def getType(self):
        return _rte2.NodeParameter_getType(self)

    def serialize(self, buffer, pContext):
        return _rte2.NodeParameter_serialize(self, buffer, pContext)

    def deserialize(self, buffer, pContext):
        return _rte2.NodeParameter_deserialize(self, buffer, pContext)

    def setValue(self, pNewValue, newValueSize):
        return _rte2.NodeParameter_setValue(self, pNewValue, newValueSize)

    def getValue(self, pOut, valueSize):
        return _rte2.NodeParameter_getValue(self, pOut, valueSize)

    def setValueInt32(self, newValue):
        return _rte2.NodeParameter_setValueInt32(self, newValue)

    def getValueInt32(self):
        return _rte2.NodeParameter_getValueInt32(self)

    def setValueFloat32(self, newValue):
        return _rte2.NodeParameter_setValueFloat32(self, newValue)

    def getValueFloat32(self):
        return _rte2.NodeParameter_getValueFloat32(self)

    def setValueVector3(self, newValue):
        return _rte2.NodeParameter_setValueVector3(self, newValue)

    def getValueVector3(self):
        return _rte2.NodeParameter_getValueVector3(self)

    def setValueString(self, newValue):
        return _rte2.NodeParameter_setValueString(self, newValue)

    def getValueString(self):
        return _rte2.NodeParameter_getValueString(self)

    def setValueFile(self, newValue):
        return _rte2.NodeParameter_setValueFile(self, newValue)

    def getValueFile(self):
        return _rte2.NodeParameter_getValueFile(self)
NodeParameter_swigregister = _rte2.NodeParameter_swigregister
NodeParameter_swigregister(NodeParameter)

def NodeParameter_setFileParameterRoot(rootPath):
    return _rte2.NodeParameter_setFileParameterRoot(rootPath)
NodeParameter_setFileParameterRoot = _rte2.NodeParameter_setFileParameterRoot

def NodeParameter_getFileParameterRoot():
    return _rte2.NodeParameter_getFileParameterRoot()
NodeParameter_getFileParameterRoot = _rte2.NodeParameter_getFileParameterRoot

class NodeParameterValueSerializer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NodeParameterValueSerializer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NodeParameterValueSerializer, name)
    __repr__ = _swig_repr
    __swig_getmethods__["serialize"] = lambda x: _rte2.NodeParameterValueSerializer_serialize
    if _newclass:
        serialize = staticmethod(_rte2.NodeParameterValueSerializer_serialize)
    __swig_getmethods__["deserialize"] = lambda x: _rte2.NodeParameterValueSerializer_deserialize
    if _newclass:
        deserialize = staticmethod(_rte2.NodeParameterValueSerializer_deserialize)

    def __init__(self):
        this = _rte2.new_NodeParameterValueSerializer()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _rte2.delete_NodeParameterValueSerializer
    __del__ = lambda self: None
NodeParameterValueSerializer_swigregister = _rte2.NodeParameterValueSerializer_swigregister
NodeParameterValueSerializer_swigregister(NodeParameterValueSerializer)

def NodeParameterValueSerializer_serialize(ptr, pParam):
    return _rte2.NodeParameterValueSerializer_serialize(ptr, pParam)
NodeParameterValueSerializer_serialize = _rte2.NodeParameterValueSerializer_serialize

def NodeParameterValueSerializer_deserialize(ptr, pParam):
    return _rte2.NodeParameterValueSerializer_deserialize(ptr, pParam)
NodeParameterValueSerializer_deserialize = _rte2.NodeParameterValueSerializer_deserialize


_rte2.CommandType_Invalid_swigconstant(_rte2)
CommandType_Invalid = _rte2.CommandType_Invalid

_rte2.CommandType_Ping_swigconstant(_rte2)
CommandType_Ping = _rte2.CommandType_Ping

_rte2.CommandType_NodeNameList_swigconstant(_rte2)
CommandType_NodeNameList = _rte2.CommandType_NodeNameList

_rte2.CommandType_Node_swigconstant(_rte2)
CommandType_Node = _rte2.CommandType_Node

_rte2.CommandType_ParamUpdate_swigconstant(_rte2)
CommandType_ParamUpdate = _rte2.CommandType_ParamUpdate
class Command(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Command, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Command, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _rte2.delete_Command
    __del__ = lambda self: None

    def getType(self):
        return _rte2.Command_getType(self)

    def serialize(self, buffer, pContext):
        return _rte2.Command_serialize(self, buffer, pContext)

    def deserialize(self, buffer, pContext):
        return _rte2.Command_deserialize(self, buffer, pContext)
Command_swigregister = _rte2.Command_swigregister
Command_swigregister(Command)

class PingCommand(Command):
    __swig_setmethods__ = {}
    for _s in [Command]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PingCommand, name, value)
    __swig_getmethods__ = {}
    for _s in [Command]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PingCommand, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _rte2.new_PingCommand()
        try:
            self.this.append(this)
        except:
            self.this = this

    def serialize(self, buffer, pContext):
        return _rte2.PingCommand_serialize(self, buffer, pContext)

    def deserialize(self, buffer, pContext):
        return _rte2.PingCommand_deserialize(self, buffer, pContext)
    __swig_destroy__ = _rte2.delete_PingCommand
    __del__ = lambda self: None
PingCommand_swigregister = _rte2.PingCommand_swigregister
PingCommand_swigregister(PingCommand)

class NodeNameListCommand(Command):
    __swig_setmethods__ = {}
    for _s in [Command]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NodeNameListCommand, name, value)
    __swig_getmethods__ = {}
    for _s in [Command]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NodeNameListCommand, name)
    __repr__ = _swig_repr
    __swig_getmethods__["createNodeTree"] = lambda x: _rte2.NodeNameListCommand_createNodeTree
    if _newclass:
        createNodeTree = staticmethod(_rte2.NodeNameListCommand_createNodeTree)

    def __init__(self):
        this = _rte2.new_NodeNameListCommand()
        try:
            self.this.append(this)
        except:
            self.this = this

    def serialize(self, buffer, pContext):
        return _rte2.NodeNameListCommand_serialize(self, buffer, pContext)

    def deserialize(self, buffer, pContext):
        return _rte2.NodeNameListCommand_deserialize(self, buffer, pContext)

    def add(self, pNode):
        return _rte2.NodeNameListCommand_add(self, pNode)

    def getNodePathList(self):
        return _rte2.NodeNameListCommand_getNodePathList(self)
    __swig_destroy__ = _rte2.delete_NodeNameListCommand
    __del__ = lambda self: None
NodeNameListCommand_swigregister = _rte2.NodeNameListCommand_swigregister
NodeNameListCommand_swigregister(NodeNameListCommand)

def NodeNameListCommand_createNodeTree(pathList):
    return _rte2.NodeNameListCommand_createNodeTree(pathList)
NodeNameListCommand_createNodeTree = _rte2.NodeNameListCommand_createNodeTree

class NodeCommand(Command):
    __swig_setmethods__ = {}
    for _s in [Command]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NodeCommand, name, value)
    __swig_getmethods__ = {}
    for _s in [Command]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NodeCommand, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _rte2.new_NodeCommand()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _rte2.delete_NodeCommand
    __del__ = lambda self: None

    def serialize(self, buffer, pContext):
        return _rte2.NodeCommand_serialize(self, buffer, pContext)

    def deserialize(self, buffer, pContext):
        return _rte2.NodeCommand_deserialize(self, buffer, pContext)

    def get(self):
        return _rte2.NodeCommand_get(self)

    def set(self, pNode):
        return _rte2.NodeCommand_set(self, pNode)
NodeCommand_swigregister = _rte2.NodeCommand_swigregister
NodeCommand_swigregister(NodeCommand)

class ParamUpdateCommand(Command):
    __swig_setmethods__ = {}
    for _s in [Command]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParamUpdateCommand, name, value)
    __swig_getmethods__ = {}
    for _s in [Command]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ParamUpdateCommand, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _rte2.new_ParamUpdateCommand()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _rte2.delete_ParamUpdateCommand
    __del__ = lambda self: None

    def serialize(self, buffer, pContext):
        return _rte2.ParamUpdateCommand_serialize(self, buffer, pContext)

    def deserialize(self, buffer, pContext):
        return _rte2.ParamUpdateCommand_deserialize(self, buffer, pContext)

    def add(self, pNodeParam):
        return _rte2.ParamUpdateCommand_add(self, pNodeParam)

    def getParameterList(self):
        return _rte2.ParamUpdateCommand_getParameterList(self)
ParamUpdateCommand_swigregister = _rte2.ParamUpdateCommand_swigregister
ParamUpdateCommand_swigregister(ParamUpdateCommand)

class Context(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Context, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Context, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _rte2.new_Context()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _rte2.delete_Context
    __del__ = lambda self: None

    def addNode(self, name, pParent):
        return _rte2.Context_addNode(self, name, pParent)

    def findNode(self, path):
        return _rte2.Context_findNode(self, path)

    def removeNode(self, pNode):
        return _rte2.Context_removeNode(self, pNode)
Context_swigregister = _rte2.Context_swigregister
Context_swigregister(Context)

class Socket(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Socket, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Socket, name)
    __repr__ = _swig_repr
    ProtocolType_Invalid = _rte2.Socket_ProtocolType_Invalid
    ProtocolType_Tcp = _rte2.Socket_ProtocolType_Tcp

    def __init__(self):
        this = _rte2.new_Socket()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _rte2.delete_Socket
    __del__ = lambda self: None
    __swig_getmethods__["setup"] = lambda x: _rte2.Socket_setup
    if _newclass:
        setup = staticmethod(_rte2.Socket_setup)
    __swig_getmethods__["shutdown"] = lambda x: _rte2.Socket_shutdown
    if _newclass:
        shutdown = staticmethod(_rte2.Socket_shutdown)

    def configure(self, type):
        return _rte2.Socket_configure(self, type)

    def send(self, buffer, bufferSize):
        return _rte2.Socket_send(self, buffer, bufferSize)

    def recv(self, buffer, bufferSize):
        return _rte2.Socket_recv(self, buffer, bufferSize)

    def close(self):
        return _rte2.Socket_close(self)

    def getAvailabieSize(self):
        return _rte2.Socket_getAvailabieSize(self)

    def getProtocolType(self):
        return _rte2.Socket_getProtocolType(self)

    def getHost(self):
        return _rte2.Socket_getHost(self)

    def getPort(self):
        return _rte2.Socket_getPort(self)

    def bind(self, port):
        return _rte2.Socket_bind(self, port)

    def listen(self, backlog=1):
        return _rte2.Socket_listen(self, backlog)

    def accept(self, pAccepted):
        return _rte2.Socket_accept(self, pAccepted)

    def connect(self, host, port):
        return _rte2.Socket_connect(self, host, port)
Socket_swigregister = _rte2.Socket_swigregister
Socket_swigregister(Socket)

def Socket_setup():
    return _rte2.Socket_setup()
Socket_setup = _rte2.Socket_setup

def Socket_shutdown():
    return _rte2.Socket_shutdown()
Socket_shutdown = _rte2.Socket_shutdown

class buffer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, buffer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, buffer, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _rte2.new_buffer(nelements)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _rte2.delete_buffer
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _rte2.buffer___getitem__(self, index)

    def __setitem__(self, index, value):
        return _rte2.buffer___setitem__(self, index, value)

    def cast(self):
        return _rte2.buffer_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _rte2.buffer_frompointer
    if _newclass:
        frompointer = staticmethod(_rte2.buffer_frompointer)
buffer_swigregister = _rte2.buffer_swigregister
buffer_swigregister(buffer)

def buffer_frompointer(t):
    return _rte2.buffer_frompointer(t)
buffer_frompointer = _rte2.buffer_frompointer

class StringVecotor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVecotor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVecotor, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _rte2.StringVecotor_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _rte2.StringVecotor___nonzero__(self)

    def __bool__(self):
        return _rte2.StringVecotor___bool__(self)

    def __len__(self):
        return _rte2.StringVecotor___len__(self)

    def pop(self):
        return _rte2.StringVecotor_pop(self)

    def __getslice__(self, i, j):
        return _rte2.StringVecotor___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _rte2.StringVecotor___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _rte2.StringVecotor___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _rte2.StringVecotor___delitem__(self, *args)

    def __getitem__(self, *args):
        return _rte2.StringVecotor___getitem__(self, *args)

    def __setitem__(self, *args):
        return _rte2.StringVecotor___setitem__(self, *args)

    def append(self, x):
        return _rte2.StringVecotor_append(self, x)

    def empty(self):
        return _rte2.StringVecotor_empty(self)

    def size(self):
        return _rte2.StringVecotor_size(self)

    def clear(self):
        return _rte2.StringVecotor_clear(self)

    def swap(self, v):
        return _rte2.StringVecotor_swap(self, v)

    def get_allocator(self):
        return _rte2.StringVecotor_get_allocator(self)

    def begin(self):
        return _rte2.StringVecotor_begin(self)

    def end(self):
        return _rte2.StringVecotor_end(self)

    def rbegin(self):
        return _rte2.StringVecotor_rbegin(self)

    def rend(self):
        return _rte2.StringVecotor_rend(self)

    def pop_back(self):
        return _rte2.StringVecotor_pop_back(self)

    def erase(self, *args):
        return _rte2.StringVecotor_erase(self, *args)

    def __init__(self, *args):
        this = _rte2.new_StringVecotor(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _rte2.StringVecotor_push_back(self, x)

    def front(self):
        return _rte2.StringVecotor_front(self)

    def back(self):
        return _rte2.StringVecotor_back(self)

    def assign(self, n, x):
        return _rte2.StringVecotor_assign(self, n, x)

    def resize(self, *args):
        return _rte2.StringVecotor_resize(self, *args)

    def insert(self, *args):
        return _rte2.StringVecotor_insert(self, *args)

    def reserve(self, n):
        return _rte2.StringVecotor_reserve(self, n)

    def capacity(self):
        return _rte2.StringVecotor_capacity(self)
    __swig_destroy__ = _rte2.delete_StringVecotor
    __del__ = lambda self: None
StringVecotor_swigregister = _rte2.StringVecotor_swigregister
StringVecotor_swigregister(StringVecotor)

class NodePtrVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NodePtrVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NodePtrVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _rte2.NodePtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _rte2.NodePtrVector___nonzero__(self)

    def __bool__(self):
        return _rte2.NodePtrVector___bool__(self)

    def __len__(self):
        return _rte2.NodePtrVector___len__(self)

    def pop(self):
        return _rte2.NodePtrVector_pop(self)

    def __getslice__(self, i, j):
        return _rte2.NodePtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _rte2.NodePtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _rte2.NodePtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _rte2.NodePtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _rte2.NodePtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _rte2.NodePtrVector___setitem__(self, *args)

    def append(self, x):
        return _rte2.NodePtrVector_append(self, x)

    def empty(self):
        return _rte2.NodePtrVector_empty(self)

    def size(self):
        return _rte2.NodePtrVector_size(self)

    def clear(self):
        return _rte2.NodePtrVector_clear(self)

    def swap(self, v):
        return _rte2.NodePtrVector_swap(self, v)

    def get_allocator(self):
        return _rte2.NodePtrVector_get_allocator(self)

    def begin(self):
        return _rte2.NodePtrVector_begin(self)

    def end(self):
        return _rte2.NodePtrVector_end(self)

    def rbegin(self):
        return _rte2.NodePtrVector_rbegin(self)

    def rend(self):
        return _rte2.NodePtrVector_rend(self)

    def pop_back(self):
        return _rte2.NodePtrVector_pop_back(self)

    def erase(self, *args):
        return _rte2.NodePtrVector_erase(self, *args)

    def __init__(self, *args):
        this = _rte2.new_NodePtrVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _rte2.NodePtrVector_push_back(self, x)

    def front(self):
        return _rte2.NodePtrVector_front(self)

    def back(self):
        return _rte2.NodePtrVector_back(self)

    def assign(self, n, x):
        return _rte2.NodePtrVector_assign(self, n, x)

    def resize(self, *args):
        return _rte2.NodePtrVector_resize(self, *args)

    def insert(self, *args):
        return _rte2.NodePtrVector_insert(self, *args)

    def reserve(self, n):
        return _rte2.NodePtrVector_reserve(self, n)

    def capacity(self):
        return _rte2.NodePtrVector_capacity(self)
    __swig_destroy__ = _rte2.delete_NodePtrVector
    __del__ = lambda self: None
NodePtrVector_swigregister = _rte2.NodePtrVector_swigregister
NodePtrVector_swigregister(NodePtrVector)

class NodeParameterPtrVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NodeParameterPtrVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NodeParameterPtrVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _rte2.NodeParameterPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _rte2.NodeParameterPtrVector___nonzero__(self)

    def __bool__(self):
        return _rte2.NodeParameterPtrVector___bool__(self)

    def __len__(self):
        return _rte2.NodeParameterPtrVector___len__(self)

    def pop(self):
        return _rte2.NodeParameterPtrVector_pop(self)

    def __getslice__(self, i, j):
        return _rte2.NodeParameterPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _rte2.NodeParameterPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _rte2.NodeParameterPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _rte2.NodeParameterPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _rte2.NodeParameterPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _rte2.NodeParameterPtrVector___setitem__(self, *args)

    def append(self, x):
        return _rte2.NodeParameterPtrVector_append(self, x)

    def empty(self):
        return _rte2.NodeParameterPtrVector_empty(self)

    def size(self):
        return _rte2.NodeParameterPtrVector_size(self)

    def clear(self):
        return _rte2.NodeParameterPtrVector_clear(self)

    def swap(self, v):
        return _rte2.NodeParameterPtrVector_swap(self, v)

    def get_allocator(self):
        return _rte2.NodeParameterPtrVector_get_allocator(self)

    def begin(self):
        return _rte2.NodeParameterPtrVector_begin(self)

    def end(self):
        return _rte2.NodeParameterPtrVector_end(self)

    def rbegin(self):
        return _rte2.NodeParameterPtrVector_rbegin(self)

    def rend(self):
        return _rte2.NodeParameterPtrVector_rend(self)

    def pop_back(self):
        return _rte2.NodeParameterPtrVector_pop_back(self)

    def erase(self, *args):
        return _rte2.NodeParameterPtrVector_erase(self, *args)

    def __init__(self, *args):
        this = _rte2.new_NodeParameterPtrVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _rte2.NodeParameterPtrVector_push_back(self, x)

    def front(self):
        return _rte2.NodeParameterPtrVector_front(self)

    def back(self):
        return _rte2.NodeParameterPtrVector_back(self)

    def assign(self, n, x):
        return _rte2.NodeParameterPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _rte2.NodeParameterPtrVector_resize(self, *args)

    def insert(self, *args):
        return _rte2.NodeParameterPtrVector_insert(self, *args)

    def reserve(self, n):
        return _rte2.NodeParameterPtrVector_reserve(self, n)

    def capacity(self):
        return _rte2.NodeParameterPtrVector_capacity(self)
    __swig_destroy__ = _rte2.delete_NodeParameterPtrVector
    __del__ = lambda self: None
NodeParameterPtrVector_swigregister = _rte2.NodeParameterPtrVector_swigregister
NodeParameterPtrVector_swigregister(NodeParameterPtrVector)

# This file is compatible with both classic and new-style classes.


